fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(meta.fgg.pr1)
# -> extract statistics of interest
### fitting gam.gam.gam prior
ggg = lapply(datstan, fit.ggg)
for(prior.ind in 1:4){
ggg[[prior.ind]]@model_name = "gam.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
# -> extract statistics of interest
# ### fitting fix.log.log prior
fll = lapply(datstan, fit.fll)
for(prior.ind in 1:4){
fll[[prior.ind]]@model_name = "fix.log.log" # manually, because not working automatically
}
# -> extract meta statistics and
# -> extract statistics of interest
# ### fitting log.log.log prior
lll = lapply(datstan, fit.lll)
for(prior.ind in 1:4){
lll[[prior.ind]]@model_name = "log.log.log" # manually, because not working automatically
}
# -> extract meta statistics and
# -> extract statistics of interest
# bring it in a meaningful order and return as one data.frame row with identifiable colnames.
return(meta.fgg.pr1)
}
start = Sys.time()
testout = sim.fit.to.one.sample(survdat = testdat) # TESTEN
end = Sys.time()
testout
end - start
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(meta.fgg.pr1)
# -> extract statistics of interest
### fitting gam.gam.gam prior
ggg = lapply(datstan, fit.ggg)
for(prior.ind in 1:4){
ggg[[prior.ind]]@model_name = "gam.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
# -> extract statistics of interest
# ### fitting fix.log.log prior
fll = lapply(datstan, fit.fll)
for(prior.ind in 1:4){
fll[[prior.ind]]@model_name = "fix.log.log" # manually, because not working automatically
}
# -> extract meta statistics and
# -> extract statistics of interest
# ### fitting log.log.log prior
lll = lapply(datstan, fit.lll)
for(prior.ind in 1:4){
lll[[prior.ind]]@model_name = "log.log.log" # manually, because not working automatically
}
# -> extract meta statistics and
# -> extract statistics of interest
# bring it in a meaningful order and return as one data.frame row with identifiable colnames.
return(meta.fgg.pr1)
}
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(meta.fgg.pr1)
}
start = Sys.time()
testout = sim.fit.to.one.sample(survdat = testdat) # TESTEN
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
end = Sys.time()
testout
end - start
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(c(meta.fgg.pr1, meta.fgg.pr2))
}
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
end = Sys.time()
testout
class(testout)
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(data.frame(meta.fgg.pr1, meta.fgg.pr2))
}
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
end = Sys.time()
testout
end - start
?stan
sample.int(.Machine$integer.max, 1)
.Machine$integer.max
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(data.frame(metameta.fgg.pr1, meta.fgg.pr2))
}
sim.repeat.1.scenario = function(scenario.pars, datagenseed.vect = NULL, reps = 100){
# scenario.pars[1] = sample size
# scenario.pars[2] = backround rate
# scenario.pars[3] = ADR rate
# scenario.pars[4] = relative st. dev. of ADR
# scenario.pars[5] = censoring time
# datagenseed.vect = vector with seeds to reproduce the simulation study results
#                    not necessary the first time.
# reps = number of repetitions for this scenario
if(!is.null(datagenseed.vect)){
reps = length(datagenseed.vect)
}
else{
datagenseed.vect = sample.int(n = 100000000, size = reps, replace = T)
}
gendata.given.sc = function(datagen.seed){
# set seed for data generation
set.seed(datagen.seed)
# simulate data set based on given scenario
sim.dat = bADRfcts::datagenUnifBr(genpar = scenario.pars)
###set.seed(Sys.time())
# fit models
fit.output = sim.fit.to.1.sample(sim.dat)
# hier alle steps bis zum output pro rep einfügen.
return(fit.output)
}
out = lapply(datagenseed.vect, gendata.given.sc)
return(out)
}
test.reps = sim.repeat.1.scenario(scenario.pars = c(10,0.25, 1, 0.05, 365), datagenseed.vect = NULL, reps = 2)
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(data.frame(metameta.fgg.pr1, meta.fgg.pr2))
}
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(data.frame(meta.fgg.pr1, meta.fgg.pr2))
}
sim.repeat.1.scenario = function(scenario.pars, datagenseed.vect = NULL, reps = 100){
# scenario.pars[1] = sample size
# scenario.pars[2] = backround rate
# scenario.pars[3] = ADR rate
# scenario.pars[4] = relative st. dev. of ADR
# scenario.pars[5] = censoring time
# datagenseed.vect = vector with seeds to reproduce the simulation study results
#                    not necessary the first time.
# reps = number of repetitions for this scenario
if(!is.null(datagenseed.vect)){
reps = length(datagenseed.vect)
}
else{
datagenseed.vect = sample.int(n = 100000000, size = reps, replace = T)
}
gendata.given.sc = function(datagen.seed){
# set seed for data generation
set.seed(datagen.seed)
# simulate data set based on given scenario
sim.dat = bADRfcts::datagenUnifBr(genpar = scenario.pars)
###set.seed(Sys.time())
# fit models
fit.output = sim.fit.to.1.sample(sim.dat)
# hier alle steps bis zum output pro rep einfügen.
return(fit.output)
}
out = lapply(datagenseed.vect, gendata.given.sc)
return(out)
}
test.reps = sim.repeat.1.scenario(scenario.pars = c(10,0.25, 1, 0.05, 365), datagenseed.vect = NULL, reps = 2)
test.reps
out = apply(datagenseed.vect, gendata.given.sc)
sim.repeat.1.scenario = function(scenario.pars, datagenseed.vect = NULL, reps = 100){
# scenario.pars[1] = sample size
# scenario.pars[2] = backround rate
# scenario.pars[3] = ADR rate
# scenario.pars[4] = relative st. dev. of ADR
# scenario.pars[5] = censoring time
# datagenseed.vect = vector with seeds to reproduce the simulation study results
#                    not necessary the first time.
# reps = number of repetitions for this scenario
if(!is.null(datagenseed.vect)){
reps = length(datagenseed.vect)
}
else{
datagenseed.vect = sample.int(n = 100000000, size = reps, replace = T)
}
gendata.given.sc = function(datagen.seed){
# set seed for data generation
set.seed(datagen.seed)
# simulate data set based on given scenario
sim.dat = bADRfcts::datagenUnifBr(genpar = scenario.pars)
###set.seed(Sys.time())
# fit models
fit.output = sim.fit.to.1.sample(sim.dat)
# hier alle steps bis zum output pro rep einfügen.
return(fit.output)
}
out = apply(datagenseed.vect, gendata.given.sc)
return(out)
}
test.reps = sim.repeat.1.scenario(scenario.pars = c(10,0.25, 1, 0.05, 365), datagenseed.vect = NULL, reps = 2)
sim.repeat.1.scenario = function(scenario.pars, datagenseed.vect = NULL, reps = 100){
# scenario.pars[1] = sample size
# scenario.pars[2] = backround rate
# scenario.pars[3] = ADR rate
# scenario.pars[4] = relative st. dev. of ADR
# scenario.pars[5] = censoring time
# datagenseed.vect = vector with seeds to reproduce the simulation study results
#                    not necessary the first time.
# reps = number of repetitions for this scenario
if(!is.null(datagenseed.vect)){
reps = length(datagenseed.vect)
}
else{
datagenseed.vect = sample.int(n = 100000000, size = reps, replace = T)
}
gendata.given.sc = function(datagen.seed){
# set seed for data generation
set.seed(datagen.seed)
# simulate data set based on given scenario
sim.dat = bADRfcts::datagenUnifBr(genpar = scenario.pars)
###set.seed(Sys.time())
# fit models
fit.output = sim.fit.to.1.sample(sim.dat)
# hier alle steps bis zum output pro rep einfügen.
return(fit.output)
}
out = sapply(datagenseed.vect, gendata.given.sc)
return(out)
}
test.reps = sim.repeat.1.scenario(scenario.pars = c(10,0.25, 1, 0.05, 365), datagenseed.vect = NULL, reps = 2)
test.reps
sim.repeat.1.scenario = function(scenario.pars, datagenseed.vect = NULL, reps = 100){
# scenario.pars[1] = sample size
# scenario.pars[2] = backround rate
# scenario.pars[3] = ADR rate
# scenario.pars[4] = relative st. dev. of ADR
# scenario.pars[5] = censoring time
# datagenseed.vect = vector with seeds to reproduce the simulation study results
#                    not necessary the first time.
# reps = number of repetitions for this scenario
if(!is.null(datagenseed.vect)){
reps = length(datagenseed.vect)
}
else{
datagenseed.vect = sample.int(n = 100000000, size = reps, replace = T)
}
gendata.given.sc = function(datagen.seed){
# set seed for data generation
set.seed(datagen.seed)
# simulate data set based on given scenario
sim.dat = bADRfcts::datagenUnifBr(genpar = scenario.pars)
###set.seed(Sys.time())
# fit models
fit.output = sim.fit.to.1.sample(sim.dat)
# hier alle steps bis zum output pro rep einfügen.
return(fit.output)
}
out = t(sapply(datagenseed.vect, gendata.given.sc))
return(out)
}
test.reps = sim.repeat.1.scenario(scenario.pars = c(10,0.25, 1, 0.05, 365), datagenseed.vect = NULL, reps = 2)
test.reps
citation("EgoCor")
