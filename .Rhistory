datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(data.frame(fgg.pr1 = meta.fgg.pr1, fgg.pr2 = meta.fgg.pr2))  ### HIER WEITER
}
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(data.frame(fgg.pr1 = meta.fgg.pr1, fgg.pr2 = meta.fgg.pr2))  ### HIER WEITER
}
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
end = Sys.time()
testout
class(testout)
t(testout)
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(fgg)
resu.fgg.pr1 =
out.fgg = data.frame(fgg.pr1 = meta.fgg.pr1, fgg.pr2 = meta.fgg.pr2)
return(out.fgg)
}
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(fgg)
}
seq(50,95,by=5)*2
seq(50,95,by=5)
library(bADRfcts)
?stanfit.to.metastats
stanfit.to.metastats = function(stanfit.object, stan.dat){
obj = stanfit.object
# seed generated within model fitting
mod.seed = rstan::get_seed(obj)
# stancode name
stancode.name = obj@model_name
# prior specifications
th.pr.mean = stan.dat$t_expect
th.pr.sd = stan.dat$t_stdev
nu.pr.mean = stan.dat$n_expect
nu.pr.sd = stan.dat$n_stdev
ga.pr.mean = stan.dat$g_expect
ga.pr.sd = stan.dat$g_stdev
run.min = sum(rstan::get_elapsed_time(obj))/60 # in minutes
metastats = c(mod.seed,
stancode.name,
th.pr.mean,
th.pr.sd,
nu.pr.mean,
nu.pr.sd,
ga.pr.mean,
ga.pr.sd,
run.min)
return(metastats)
}
library(EgoCor)
?vario.mod
testout[[2]]
testout
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
#post.fgg.pr1 =
#cred.fgg.pr1 =
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(fgg) ## HIER WEITER
}
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
end = Sys.time()
testout
end - start
testout[[2]]
str(testout[[2]])
testout[[2]]$nu
testout[[2]]@mode
testout[[2]]@stan_args
summary(testout[[2]])
testout[[2]]$summary
testout[[2]][, c(1,3,9,10)]
summary(testout[[2]])[, c(1,3,9,10)]
summary(testout[[2]])
summary(testout[[2]])[1,1]
mode(summary(testout[[2]]))
mode(summary(testout[[2]])$nu)
mode(summary(testout[[2]])$mean)
summary(testout[[2]])$mean
# function --------------------------------------------------------------------
stanfit.to.cred.ints = function(stanfit.object, cred.niveaus = seq(0.05, 0.95, by = 0.05)){
obj = stanfit.object
post_stats = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
return(post_stats)
}
# function --------------------------------------------------------------------
stanfit.to.post.stats = function(stanfit.object, cred.niveaus = seq(0.05, 0.95, by = 0.05)){
obj = stanfit.object
post_stats = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
return(post_stats)
}
testout[[2]]
# function --------------------------------------------------------------------
stanfit.to.poststats = function(stanfit.object, cred.niveaus = seq(0.05, 0.95, by = 0.05)){
obj = stanfit.object
post_stats = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
return(post_stats)
}
# function --------------------------------------------------------------------
stanfit.to.poststats = function(stanfit.object){
obj = stanfit.object
post_stats = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
return(post_stats)
}
testout[[2]]
test.poststats = stanfit.to.poststats(testout[[2]])
test.poststats
class(test.poststats)
as.vector(test.poststats)
as.vector(test.poststats)
?as.vector
as.vector(t(test.poststats))
c(test.poststats[1,], test.poststats[2,])
c(nu = test.poststats[1,], ga = test.poststats[2,])
# function --------------------------------------------------------------------
stanfit.to.poststats = function(stanfit.object){
obj = stanfit.object
post_stats = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
return(post_stats)
}
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
post.fgg.pr1 = stanfit.to.poststats(fgg[[1]])
cred.fgg.pr1 = stanfit.to.cred.ints(fgg[[1]], cred.niveaus = 0.9)
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(list(fgg[[1]], meta.fgg.pr1, post.fgg.pr1, cred.fgg.pr1)) ## HIER WEITER
}
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
end = Sys.time()
testout
# function --------------------------------------------------------------------
stanfit.to.cred.ints = function(stanfit.object, cred.niveaus = seq(0.05, 0.95, by = 0.05)){
obj = stanfit.object
# extraction of posterior samples
post.sample = rstan::extract(obj, pars = c("nu", "gamma"))
nu.post = post.sample$nu
gam.post = post.sample$gam
# credibility/confidence niveaus 1-alpha
# 5% ETI and HDI
# 10% ETI and HDI
# ...
# 95% ETI and HDI
# calculate equal tailed intervals (ETIs)
nu.eti = matrix(nrow = length(cred.niveaus), ncol = 2)
for(i in 1:length(cred.niveaus)){
nu.eti[i,] = quantile(sampl$nu, probs = 0.5 + c(-1,1)*cred.niveaus[i]/2)
}
gam.eti = matrix(nrow = length(cred.niveaus), ncol = 2)
for(i in 1:length(cred.niveaus)){
gam.eti[i,] = quantile(sampl$gam, probs = 0.5 + c(-1,1)*cred.niveaus[i]/2)
}
# calculate highest density intervals (HDIs)
nu.hdi = t(sapply(cred.niveaus, HDInterval::hdi, object = sampl$nu))
gam.hdi = t(sapply(cred.niveaus, HDInterval::hdi, object = sampl$gam))
return(list(nu.eti, nu.hdi, gam.eti, gam.hdi)) # format to be adjusted: need long vector with label for each entry
}
# function --------------------------------------------------------------------
stanfit.to.poststats = function(stanfit.object){
obj = stanfit.object
post_stats = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
return(post_stats)
}
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
post.fgg.pr1 = stanfit.to.poststats(fgg[[1]])
cred.fgg.pr1 = stanfit.to.cred.ints(fgg[[1]], cred.niveaus = 0.9)
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(list(fgg[[1]], meta.fgg.pr1, post.fgg.pr1, cred.fgg.pr1)) ## HIER WEITER
}
# testing
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
end = Sys.time()
testout
c(nu = test.poststats[1,], ga = test.poststats[2,])
# function --------------------------------------------------------------------
stanfit.to.poststats = function(stanfit.object){
obj = stanfit.object
post_summary = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
poststats = c(nu = post_summary[1,], ga = post_summary[2,])
return(post_stats)
}
# function --------------------------------------------------------------------
stanfit.to.cred.ints = function(stanfit.object, cred.niveaus = seq(0.05, 0.95, by = 0.05)){
obj = stanfit.object
# extraction of posterior samples
post.sample = rstan::extract(obj, pars = c("nu", "gamma"))
nu.post = post.sample$nu
gam.post = post.sample$gam
# credibility/confidence niveaus 1-alpha
# 5% ETI and HDI
# 10% ETI and HDI
# ...
# 95% ETI and HDI
# calculate equal tailed intervals (ETIs)
nu.eti = matrix(nrow = length(cred.niveaus), ncol = 2)
for(i in 1:length(cred.niveaus)){
nu.eti[i,] = quantile(sampl$nu, probs = 0.5 + c(-1,1)*cred.niveaus[i]/2)
}
gam.eti = matrix(nrow = length(cred.niveaus), ncol = 2)
for(i in 1:length(cred.niveaus)){
gam.eti[i,] = quantile(sampl$gam, probs = 0.5 + c(-1,1)*cred.niveaus[i]/2)
}
# calculate highest density intervals (HDIs)
nu.hdi = t(sapply(cred.niveaus, HDInterval::hdi, object = sampl$nu))
gam.hdi = t(sapply(cred.niveaus, HDInterval::hdi, object = sampl$gam))
return(list(nu.eti, nu.hdi, gam.eti, gam.hdi)) # format to be adjusted: need long vector with label for each entry
}
sim.fit.to.1.sample = function(survdat){
### Data and prior prep
datstan = list()
# 1. prior starting values reflecting hyp: "no adr risk over time"
# data reformatting
datstan[[1]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 1, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 2. prior starting values reflecting hyp: "adr occuring at beginning of observation period"
# data reformatting
datstan[[2]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 1, scale.sd = 10,
shape.mean = 0.5, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 3. prior starting values reflecting hyp: "adr occuring towards end of observatin period"
# data reformatting
datstan[[3]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 365, scale.sd = 10,
shape.mean = 10, shape.sd = 10,
powershape.mean = 1, powershape.sd = 10)
# 4. prior starting values reflecting hyp: "adr occuring within middle of the observation period"
# data reformatting
datstan[[4]] = survdat2pgwstanmodeldat(dat = survdat,
scale.mean = 12, scale.sd = 10,
shape.mean = 5, shape.sd = 10,
powershape.mean = 15, powershape.sd = 10)
### fitting fix.gam.gam prior
fgg = lapply(datstan, fit.fgg)
for(prior.ind in 1:4){
fgg[[prior.ind]]@model_name = "fix.gam.gam" # manually, because not working automatically
}
# -> extract meta statistics and
meta.fgg.pr1 = stanfit.to.metastats(fgg[[1]], datstan[[1]])
post.fgg.pr1 = stanfit.to.poststats(fgg[[1]])
cred.fgg.pr1 = stanfit.to.cred.ints(fgg[[1]], cred.niveaus = 0.9)
meta.fgg.pr2 = stanfit.to.metastats(fgg[[2]], datstan[[2]])
meta.fgg.pr3 = stanfit.to.metastats(fgg[[3]], datstan[[3]])
meta.fgg.pr4 = stanfit.to.metastats(fgg[[4]], datstan[[4]])
return(list(fgg[[1]], meta.fgg.pr1, post.fgg.pr1, cred.fgg.pr1)) ## HIER WEITER
}
start = Sys.time()
testout = sim.fit.to.1.sample(survdat = testdat) # TESTEN
# function --------------------------------------------------------------------
stanfit.to.poststats = function(stanfit.object){
obj = stanfit.object
post_summary = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
poststats = c(nu = post_summary[1,], ga = post_summary[2,])
return(poststats)
}
test.poststats = stanfit.to.poststats(testout[[2]])
test.poststats = stanfit.to.poststats(testout[[2]])
# function --------------------------------------------------------------------
stanfit.to.poststats = function(stanfit.object){
obj = stanfit.object
post_summary = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
return("works")
poststats = c(nu = post_summary[1,], ga = post_summary[2,])
return(poststats)
}
testout[[2]]
testout
test.poststats = stanfit.to.poststats(testout[[1]])
test.poststats
# function --------------------------------------------------------------------
stanfit.to.poststats = function(stanfit.object){
obj = stanfit.object
post_summary = summary(obj, pars = c("nu", "gamma"), probs = c())$summary
poststats = c(nu = post_summary[1,], ga = post_summary[2,])
return(poststats)
}
testout[[2]]
test.poststats = stanfit.to.poststats(testout[[1]])
test.poststats
library(bADRfcts)
library(bADRfcts)
